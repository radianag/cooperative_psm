#!/usr/bin/env python  
import roslib
import numpy as np
import math
import time
import sys 
import rospy
import tf
from tf import TransformListener
from geometry_msgs.msg import Twist
from sensor_msgs.msg import JointState
from std_msgs.msg import Header

from psm_coop import bullshit_library 

roslib.load_manifest('learning_tf')
def handle_PSM_pose(msg):
    global x, y, z
    global Re, inv_Re
    global object_v
   
    x[0]=x[0]+msg.linear.x
    y[0]=y[0]+msg.linear.y
    z[0]=z[0]+msg.linear.z


    #Linear Movement of PSM2
    new_vector = inv_Re.dot(np.array([msg.linear.x, msg.linear.y, msg.linear.z,1]))

    x[1]=x[1]+new_vector[0]
    y[1]=y[1]+new_vector[1]
    z[1]=z[1]+new_vector[2]

    #Angular Movement of PSM2
    rot=tf.transformations.euler_matrix(msg.angular.x,msg.angular.y,msg.angular.z, 'rxyz')
    rot_i=rot-np.identity(4)
    new_rotation=rot_i.dot(object_v)
    
    new_vector = inv_Re.dot(np.array([new_rotation[0], new_rotation[1], new_rotation[2],1]))

    x[1]=x[1]+new_vector[0]
    y[1]=y[1]+new_vector[1]
    z[1]=z[1]+new_vector[2]

    #object_v=rot.dot(object_v)

    #send_transform(x,y,z)

def handle_PSM_force(msg):
    global x, y, z
    global Re, inv_Re
    global object_v
    

    #Force Movement of PSM2 
    move_force= object_v[0:3]/np.linalg.norm(object_v[0:3])*msg.linear.x
    new_vector = inv_Re.dot(np.append(move_force),1)

    x[1]=x[1]+new_vector[0]
    y[1]=y[1]+new_vector[1]
    z[1]=z[1]+new_vector[2]

   # object_v=object_v+move_force 

    #send_transform(x,y,z)
def handle_object_pose(msg):
    global object_v

    object_v[0:4]=[msg.linear.x, msg.linear.y, msg.linear.z,1]
    
def send_transform(x,y,z):

    global p_rcm, p_tool
    global object_v 
    global rot_rcm,rot_tool
    global Re, inv_Re
    
    #Send Transform
    br = tf.TransformBroadcaster()
    br.sendTransform((p_rcm[0]),
	 (rot_rcm[0]),
	 rospy.Time.now(), 
	 "PSM1_w", "world")
    br.sendTransform((x[0], y[0], z[0]),
	 (0,0,0,1),
	 rospy.Time.now(),
	 "PSM1_1",
	 "PSM1_w")

    br.sendTransform((object_v[0], object_v[1], object_v[2]),
     (0, 0.0, 0.0, 1),
     rospy.Time.now(),
     "PSM1_test",
     "PSM1_1")

    br.sendTransform((p_rcm[1]),(rot_rcm[1]),
	 rospy.Time.now(),
	 "PSM2_w","world")
    #)
    br.sendTransform((x[1], y[1], z[1]), (0,0,0,1)
	 ,
	 rospy.Time.now(),
	 "PSM2","PSM2_w") 
    #tf.transformations.quaternion_from_matrix(inv_Re)
    
 

def inverse_kinematic(x,y,z):

    joint_angle=[0,0,0]
    joint_angle[0] = -math.atan(x/z)

    joint_angle[1] = -math.atan(y/math.sqrt(math.pow(x,2)+math.pow(z,2))) 

    joint_angle[2] = math.sqrt(math.pow(x,2)+math.pow(y,2)+math.pow(z,2))

    return joint_angle

def message_making(string,data):

    hello_str = JointState()
    hello_str.header = Header()
    hello_str.header.stamp = rospy.Time.now()
    hello_str.name = [string]
    hello_str.position = [data]
    hello_str.velocity = []
    hello_str.effort = []

    return hello_str

if __name__ == '__main__':
    global x, y, z, ox, oy, oz, p_rcm
    global rot_rcm,rot_tool
    global object_v
    rospy.init_node('psm_tf_broadcaster')
    rospy.sleep(1)

    #get position of the PSM base
    listener = tf.TransformListener()
    p_rcm=[None]*3
    p_tool=[None]*2
    rot_rcm=[None]*3
    rot_tool=[None]*2

    while (not (p_rcm[0] and p_rcm[1] and p_tool[0] and p_tool[1])): 
        try: 
            (p_rcm[0],rot_rcm[0]) = listener.lookupTransform('/world','/one_remote_center_link', rospy.Time(0))
            (p_rcm[1],rot_rcm[1]) = listener.lookupTransform('/world','/two_remote_center_link', rospy.Time(0))
            (p_rcm[2],rot_rcm[2]) = listener.lookupTransform('/one_remote_center_link','/two_remote_center_link', rospy.Time(0))

            (p_tool[0],rot_tool[0]) = listener.lookupTransform('/one_remote_center_link','/one_tool_wrist_sca_shaft_link', rospy.Time(0))
            (p_tool[1],rot_tool[1]) = listener.lookupTransform('/two_remote_center_link','/two_tool_wrist_sca_shaft_link', rospy.Time(0))
            

        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            continue

    Re = tf.transformations.quaternion_matrix(rot_rcm[2])
    inv_Re=tf.transformations.inverse_matrix(Re)

    print(inv_Re)

    x=[p_tool[0][0], p_tool[1][0]]
    y=[p_tool[0][1], p_tool[1][1]]
    z=[p_tool[0][2], p_tool[1][2]]

    print('psm_rcm:', p_rcm)
    print('rot_rcm1: ', rot_rcm)
    print('p_tool:', p_tool)

    object_v = [0,0,0,1]
 
    
    rospy.Subscriber('/psm/cmd_vel',
                     Twist,
                     handle_PSM_pose)
    rospy.Subscriber('/psm/cmd_force',
                     Twist,
                     handle_PSM_force)
    rospy.Subscriber('/psm/poses',
                     Twist,
                     handle_object_pose)
    
    p=[None]*6

    p[0] = rospy.Publisher('psm1/joint1', JointState, queue_size=10)
    p[1] = rospy.Publisher('psm1/joint2', JointState, queue_size=10)
    p[2] = rospy.Publisher('psm1/joint3', JointState, queue_size=10)
    p[3] = rospy.Publisher('psm2/joint1', JointState, queue_size=10)
    p[4] = rospy.Publisher('psm2/joint2', JointState, queue_size=10)
    p[5] = rospy.Publisher('psm2/joint2', JointState, queue_size=10)
    
    rospy.sleep(0.5)
    joint_angle=[None]*6
    names=['one_outer_yaw_joint', 'one_outer_pitch_joint_1','one_outer_insertion_joint','two_outer_yaw_joint', 'two_outer_pitch_joint_1','two_outer_insertion_joint']
    
    f = bullshit_library.bullshit()

    f.print_f()

    while not rospy.is_shutdown():
        try:
            send_transform(x,y,z)
            joint_angle[0:3]=inverse_kinematic(x[0],y[0],z[0])
            joint_angle[3:7]=inverse_kinematic(x[1],y[1],z[1])
            for i in range(6):
                msg=message_making(names[i],joint_angle[i])
                p[i].publish(msg)


            #print(joint_angle1)

        except: 
            continue

    rospy.spin()
