#include "force_control.h"

void PsmForceControl::CalcJaM(Eigen::VectorXd q, Eigen::VectorXd qd)
{
    float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);
    float qd1 = qd(0);
    float qd2 = qd(1);
    float qd3 = qd(2);

    // Jacobian from matlab
    float t2 = q2-2.908373974667121E-1;
    float t3 = cos(t2);
    float t4 = 3.141592653589793*(1.0/2.0);
    float t5 = -q2+t4+2.908373974667121E-1;
    float t6 = q2-t4;
    float t7 = sin(t5);
    float t8 = cos(t5);
    float t9 = sin(t2);
    float t10 = cos(t6);
    float t11 = t3*t7;
    float t12 = t8*t9;
    float t13 = t11+t12;
    float t14 = t3*t8;
    float t17 = t7*t9;
    float t15 = t14-t17;
    float t16 = sin(t6);
    float t18 = q1-t4;
    float t19 = sin(t18);
    float t20 = t3*t7*t19;
    float t21 = t8*t9*t19;
    float t22 = t20+t21;
    float t23 = t3*t8*t19;
    float t25 = t7*t9*t19;
    float t24 = t23-t25;
    float t26 = q3+4.162E-1;
    float t27 = cos(t18);
    float t28 = t3*t7*t27;
    float t29 = t8*t9*t27;
    float t30 = t28+t29;
    float t31 = t3*t8*t27;
    float t33 = t7*t9*t27;
    float t32 = t31-t33;
    float t34 = t16*t30;
    float t35 = t34-t10*t32;
    float t36 = t10*t24;
    float t37 = t36-t16*t22;

    JaM(0,1) = t3*(3.0/2.0E1)-t10*t13*(4.3E1/1.0E3)+t10*t15*(1.68E2/6.25E2)-t13*t16*(1.68E2/6.25E2)-t15*t16*(4.3E1/1.0E3)-t26*(t10*t15-t13*t16);
    JaM(0,2) = -t10*t13-t15*t16;
    JaM(1,0) = t3*t19*(-3.0/2.0E1)+t10*t22*(4.3E1/1.0E3)-t10*t24*(1.68E2/6.25E2)+t16*t22*(1.68E2/6.25E2)+t16*t24*(4.3E1/1.0E3)+t26*t37-t3*t8*t19*(1.29E2/2.5E2)+t7*t9*t19*(1.29E2/2.5E2);
    JaM(1,1) = t9*t27*(-3.0/2.0E1)-t10*t30*(1.68E2/6.25E2)-t10*t32*(4.3E1/1.0E3)+t16*t30*(4.3E1/1.0E3)-t16*t32*(1.68E2/6.25E2)+t26*(t10*t30+t16*t32);
    JaM(1,2) = t35;
    JaM(2,0) = t3*t27*(-3.0/2.0E1)+t10*t30*(4.3E1/1.0E3)-t10*t32*(1.68E2/6.25E2)+t16*t30*(1.68E2/6.25E2)+t16*t32*(4.3E1/1.0E3)-t26*t35-t3*t8*t27*(1.29E2/2.5E2)+t7*t9*t27*(1.29E2/2.5E2);
    JaM(2,1) = t9*t19*(3.0/2.0E1)+t10*t22*(1.68E2/6.25E2)+t10*t24*(4.3E1/1.0E3)-t16*t22*(4.3E1/1.0E3)+t16*t24*(1.68E2/6.25E2)-t26*(t10*t22+t16*t24);
    JaM(2,2) = t37;

}

void PsmForceControl::CalcN(Eigen::VectorXd q, Eigen::VectorXd qd) {
    float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);
    float qd1 = qd(0);
    float qd2 = qd(1);
    float qd3 = qd(2);

    // N
    if (name == "PSM1") {
        float t2 = q1 - q2;
        float t3 = q1 + q2 - 2.908373974667121E-1;
        float t4 = q1 - q2 + 2.908373974667121E-1;
        float t5 = q1 + q2;
        float t6 = qd2 * qd2;
        float t7 = sin(t4);
        float t8 = sin(t5);
        float t9 = sin(t2);
        float t10 = sin(t3);
        float t11 = sin(q2);
        float t12 = q2 - 2.908373974667121E-1;
        float t13 = cos(t12);
        float t14 = q2 * 2.0;
        float t15 = t14 - 2.908373974667121E-1;
        float t16 = cos(t15);
        float t17 = t14 - 5.816747949334241E-1;
        float t18 = sin(t17);
        float t19 = cos(q2);
        float t20 = cos(t14);
        float t21 = sin(t14);
        float t22 = q3 * q3;
        float t23 = cos(t17);
        float t24 = sin(t15);
        float t25 = cos(t2);
        float t26 = t9 * 2.733215756395077;
        float t27 = cos(t3);
        float t28 = cos(t4);
        float t29 = t28 * 5.16223995547158E-1;
        float t30 = cos(t5);
        float t31 = t30 * 3.592041604117469E-2;
        float t32 = t8 * 2.733215756395077;
        float t33 = qd1 * qd1;
        float t34 = q3 * t7 * 1.327945847307407;
        float t35 = q2 - 5.816747949334241E-1;
        float t36 = sin(t35);
        float t37 = q3 * t10 * 1.327945847307407;
        float t38 = cos(2.908373974667121E-1);

        N(0) = q1 * (-1.414143078037124) - qd1 * 6.017170786081841E-2 - t7 * 1.607410916322051 -
               t10 * 1.607410916322051 - t25 * 3.592041604117469E-2 + t26 - t27 * 5.16223995547158E-1 + t29 + t31 +
               t32 + t34 + t37 - sin(q1 - 2.908373974667121E-1) * 1.381353770893327 -
               sin(q1 + 2.908373974667121E-1) * 1.381353770893327 + cos(q1) * 2.443913113060148E-2 +
               sin(q1) * 2.339828709154676 + qd1 * qd3 * 2.647017575466359E-1 - q3 * t8 * 1.4602217424003 -
               q3 * t9 * 1.4602217424003 - t6 * t11 * 5.266507406325907E-2 - t6 * t13 * 5.650959887702604E-2 +
               t6 * t19 * 6.243564561426633E-2 + qd2 * qd3 * sin(t12) * 3.991146837973142E-1 -
               q3 * qd1 * qd3 * 1.138027587635799 - qd1 * qd2 * t11 * 8.457267985061186E-2 -
               qd2 * qd3 * t11 * 4.334303756630776E-1 - qd1 * qd2 * t16 * 2.754321337470551E-1 +
               qd1 * qd3 * t16 * 8.940133116736533E-2 + qd1 * qd2 * t18 * 1.34101996751048E-2 -
               qd1 * qd3 * t18 * 2.107036716519012E-1 + qd1 * qd2 * t20 * 8.295619278055471E-2 +
               qd1 * qd2 * t21 * 5.739994956059657E-1 - qd1 * qd3 * t20 * 4.807856619154441E-1 -
               qd1 * qd3 * t21 * 2.413586136479669E-1 - qd1 * qd2 * t24 * 1.442356985746332E-1 +
               qd1 * qd3 * t23 * 7.4548741946208E-1 - qd1 * qd2 * t36 * 8.457267985061186E-2 +
               qd1 * qd3 * t38 * 8.940133116736533E-2 + q3 * t6 * t13 * 1.995573418986571E-1 -
               q3 * t6 * t19 * 2.167151878315388E-1 - q3 * qd1 * qd2 * t18 * 1.49097483892416 -
               q3 * qd1 * qd2 * t20 * 4.827172272959338E-1 + q3 * qd1 * qd2 * t21 * 9.615713238308882E-1 -
               q3 * qd1 * qd3 * t20 * 5.960088744491022E-1 - q3 * qd1 * qd2 * t23 * 4.214073433038025E-1 -
               q3 * qd1 * qd2 * t24 * 1.788026623347307E-1 - q3 * qd1 * qd3 * t23 * 5.420187131866966E-1 +
               qd1 * qd2 * t18 * t22 * 5.420187131866966E-1 + qd1 * qd2 * t21 * t22 * 5.960088744491022E-1;
        N(1) = q2 * (-1.995951913841251) - qd2 * 1.25836793913242E-1 + t7 * 1.607410916322051 -
               t10 * 1.607410916322051 + t25 * 3.592041604117469E-2 - t26 - t27 * 5.16223995547158E-1 - t29 + t31 +
               t32 - t34 + t37 + qd2 * qd3 * 5.294035150932717E-1 - q3 * t8 * 1.4602217424003 +
               q3 * t9 * 1.4602217424003 + t11 * t33 * 4.228633992530593E-2 + t16 * t33 * 1.377160668735276E-1 -
               t18 * t33 * 6.7050998375524E-3 - t20 * t33 * 4.147809639027736E-2 - t21 * t33 * 2.869997478029829E-1 +
               t24 * t33 * 7.211784928731662E-2 + t33 * t36 * 4.228633992530593E-2 -
               q3 * qd2 * qd3 * 2.276055175271598 + qd2 * qd3 * t38 * 1.788026623347307E-1 +
               q3 * t18 * t33 * 7.4548741946208E-1 + q3 * t20 * t33 * 2.413586136479669E-1 -
               q3 * t21 * t33 * 4.807856619154441E-1 + q3 * t23 * t33 * 2.107036716519012E-1 +
               q3 * t24 * t33 * 8.940133116736533E-2 - t18 * t22 * t33 * 2.710093565933483E-1 -
               t21 * t22 * t33 * 2.980044372245511E-1;
        N(2) = qd3 * (-4.976864218216689E-1) - t6 * 2.647017575466359E-1 + t25 * 1.4602217424003 -
               t27 * 1.327945847307407 - t28 * 1.327945847307407 + t30 * 1.4602217424003 - t33 * 1.323508787733179E-1 +
               q3 * t6 * 1.138027587635799 + q3 * t33 * 5.690137938178994E-1 - t6 * t38 * 8.940133116736533E-2 -
               t16 * t33 * 4.470066558368267E-2 + t18 * t33 * 1.053518358259506E-1 + t20 * t33 * 2.403928309577221E-1 +
               t21 * t33 * 1.206793068239835E-1 - t23 * t33 * 3.7274370973104E-1 - t33 * t38 * 4.470066558368267E-2 +
               q3 * t20 * t33 * 2.980044372245511E-1 + q3 * t23 * t33 * 2.710093565933483E-1;

        for (int i = 0; i < 3; i++) {
            if (isnan(N(i)) == 1) {
                N(i) = 0;
            }
        }

    }
}



void PsmForceControl::CalcC(Eigen::VectorXd q, Eigen::VectorXd qd)
{
    float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);
    float qd1 = qd(0);
    float qd2 = qd(1);
    float qd3 = qd(2);

    float t2 = q2*2.0;
    float t3 = q3+t2;
    float t4 = t2-5.816747949334241E-1;
    float t5 = t2-2.908373974667121E-1;
    float t6 = q3*2.0;
    float t7 = -q3+t2;
    float t8 = t2-t6;
    float t9 = t2+t6;
    float t10 = q3-t2+2.908373974667121E-1;
    float t11 = q3+t2-2.908373974667121E-1;
    float t12 = q3-2.908373974667121E-1;
    float t13 = q3+2.908373974667121E-1;
    float t14 = cos(t2);
    float t15 = cos(t6);
    float t16 = sin(t2);
    float t17 = sin(t6);
    float t18 = cos(t7);
    float t19 = cos(t8);
    float t20 = cos(t9);
    float t21 = cos(t4);
    float t22 = sin(t7);
    float t23 = sin(t8);
    float t24 = sin(t9);
    float t25 = cos(t10);
    float t26 = cos(t11);
    float t27 = sin(t10);
    float t28 = sin(t11);
    float t29 = cos(t12);
    float  t30 = cos(t13);
    float t31 = q2-5.816747949334241E-1;
    float t32 = sin(t12);
    float  t33 = sin(t13);
    float  t34 = cos(q3);
    float  t35 = sin(q3);
    float  t36 = q3*q3;
    float  t37 = cos(t3);
    float  t38 = cos(t5);
    float  t39 = sin(t3);
    float  t40 = sin(t4);
    float  t41 = sin(t5);
    float  t42 = q2-q3;
    float  t43 = q2-t6;
    float  t44 = q2+t6;
    float  t45 = q2+q3-2.908373974667121E-1;
    float  t46 = -q2+q3+2.908373974667121E-1;
    float  t47 = q2+q3;
    float  t48 = q2-2.908373974667121E-1;
    float  t49 = cos(t46);
    float  t50 = sin(t46);
    float  t51 = cos(t47);
    float  t52 = cos(t48);
    float  t53 = sin(t47);
    float  t54 = sin(t48);
    float  t55 = sin(t31);
    float  t56 = cos(q2);
    float  t57 = sin(q2);
    float  t58 = cos(t42);
    float  t59 = cos(t43);
    float  t60 = cos(t44);
    float  t61 = sin(t42);
    float  t62 = sin(t43);
    float  t63 = sin(t44);
    float  t64 = cos(t45);
    float  t65 = sin(t45);
    float  t66 = t49*1.882831077710977E-4;
    float  t67 = t50*8.929284668366714E-4;
    float  t68 = t51*2.187023801023081E-3;
    float  t69 = qd1*t20*9.641693446251764E-3;
    float  t70 = qd2*t60*2.382719144631059E-1;
    float  t71 = qd2*t62*1.928338689250353E-2;
    float  t72 = qd2*t63*1.928338689250353E-2;
    float  t73 = cos(2.908373974667121E-1);
    float  t74 = qd1*t16*4.659634886359594E-1;
    float  t75 = sin(2.908373974667121E-1);
    float  t76 = qd3*t56*5.811329365550027E-1;
    float t77 = qd1*t57*2.825070207040501E-1;
    float t78 = sin(5.816747949334241E-1);
    float t79 = cos(5.816747949334241E-1);
    float t80 = t56*t56;
    float t81 = t73*t73;
    float t82 = t34*t34;
    float t83 = qd2*t17*4.765438289262118E-1;
    float t84 = t35*t73*3.765662155421955E-4;
    float t85 = q3*qd2*3.547726451423457E-2;
    float t86 = qd2*t34*2.047782617278766E-3;
    float t87 = qd1*t34*t57*1.954397302546342E-2;
    float t88 = qd2*t35*t75*1.506264862168782E-3;
    float t89 = qd1*t34*t56*t75*1.506264862168782E-3;
    float t90 = qd1*t35*t56*t75*7.143427734693371E-3;
    C(0,0) = q3*5.641684399813122E-2-qd3*1.128336879962624E-1+t14*1.164908721589898E-1-t15*5.956797861577647E-2+t16*3.78435941017915E-3-t17*4.820846723125882E-3+t18*4.465001762795682E-2-t19*2.978398930788824E-2-t20*2.978398930788824E-2-t21*2.014865689785166E-1-t22*2.698969455342773E-3+t23*2.410423361562941E-3-t24*2.410423361562941E-3+t25*8.929284668366714E-4-t26*8.929284668366714E-4-t27*1.882831077710977E-4+t28*1.882831077710977E-4+t29*8.929284668366714E-4-t30*8.929284668366714E-4-t32*1.882831077710977E-4+t33*1.882831077710977E-4-t34*1.079489817887627E-4-t35*5.119456543196916E-4-t36*4.434658064279322E-3-t37*4.454206864616806E-2-t38*1.32012537564389E-2-t39*2.187023801023081E-3+t40*8.799769460551694E-2+t41*1.862739453565847E-3+t56*1.412535103520251E-1-t73*1.32012537564389E-2+t75*1.862739453565847E-3-t78*7.206792799878022E-2+cos(t31)*1.412535103520251E-1+q3*qd3*1.773863225711729E-2+q3*t21*5.641684399813122E-2-q3*t40*1.979388287369336E-2-qd2*t14*1.51374376407166E-2+qd2*t16*4.659634886359594E-1+qd3*t15*1.928338689250353E-2+qd2*t18*1.079587782137109E-2-qd3*t17*2.382719144631059E-1-qd2*t19*9.641693446251764E-3-qd3*t18*5.397938910685546E-3+qd2*t20*9.641693446251764E-3+qd3*t19*9.641693446251764E-3-qd2*t21*3.519907784220678E-1+qd3*t20*9.641693446251764E-3+qd2*t22*1.786000705118273E-1-qd3*t21*1.128336879962624E-1-qd2*t23*1.191359572315529E-1-qd3*t22*8.930003525591364E-2-qd2*t24*1.191359572315529E-1+qd3*t23*1.191359572315529E-1-qd2*t25*7.53132431084391E-4-qd3*t24*1.191359572315529E-1-qd2*t26*7.53132431084391E-4+qd3*t25*3.765662155421955E-4-qd2*t27*3.571713867346686E-3-qd3*t26*3.765662155421955E-4-qd2*t28*3.571713867346686E-3+qd3*t27*1.785856933673343E-3-qd3*t28*1.785856933673343E-3+qd3*t29*3.765662155421955E-4-qd3*t30*3.765662155421955E-4+qd3*t32*1.785856933673343E-3-qd3*t33*1.785856933673343E-3+qd3*t34*1.023891308639383E-3-qd3*t35*2.158979635775254E-4+qd2*t37*8.748095204092325E-3-qd2*t38*7.450957814263388E-3+qd3*t37*4.374047602046162E-3-qd2*t39*1.781682745846722E-1-qd2*t40*8.059462759140663E-1-qd3*t39*8.908413729233612E-2-qd2*t41*5.280501502575559E-2+qd3*t40*3.958776574738673E-2+qd2*t55*2.825070207040501E-1+qd2*t57*2.825070207040501E-1-t21*t36*4.434658064279322E-3+q3*qd2*t21*7.917553149477345E-2+q3*qd3*t21*1.773863225711729E-2+q3*qd2*t40*2.256673759925249E-1-qd2*t36*t40*1.773863225711729E-2-3.323437414950833E-1;
    C(0,1) = t52*4.915806880307994E-2-t53*4.454206864616806E-2+t54*1.320771962680341E-1-t58*2.698969455342773E-3+t59*4.820846723125882E-3+t60*4.820846723125882E-3-t61*4.465001762795682E-2+t62*5.956797861577647E-2-t63*5.956797861577647E-2-t64*1.882831077710977E-4-t65*8.929284668366714E-4+t66+t67+t68+t69+t70+t71+t72+t74+t76+t77+q3*t54*1.266821036021037E-1-qd1*t14*1.51374376407166E-2+qd1*t18*1.079587782137109E-2-qd1*t19*9.641693446251764E-3-qd1*t21*3.519907784220678E-1+qd1*t22*1.786000705118273E-1-qd1*t23*1.191359572315529E-1-qd1*t24*1.191359572315529E-1-qd1*t25*7.53132431084391E-4-qd1*t26*7.53132431084391E-4-qd1*t27*3.571713867346686E-3-qd1*t28*3.571713867346686E-3+qd1*t37*8.748095204092325E-3-qd1*t38*7.450957814263388E-3-qd1*t39*1.781682745846722E-1-qd1*t40*8.059462759140663E-1-qd1*t41*5.280501502575559E-2+qd2*t49*3.571713867346686E-3-qd2*t50*7.53132431084391E-4+qd2*t51*1.781682745846722E-1-qd2*t52*5.283087850721363E-1+qd2*t53*8.748095204092325E-3+qd1*t55*2.825070207040501E-1+qd2*t54*1.966322752123198E-1-qd3*t54*5.06728414408415E-1+qd2*t58*1.786000705118273E-1-qd2*t59*2.382719144631059E-1+qd3*t59*2.382719144631059E-1-qd2*t61*1.079587782137109E-2+qd3*t60*2.382719144631059E-1-qd3*t62*1.928338689250353E-2+qd2*t64*3.571713867346686E-3+qd3*t63*1.928338689250353E-2-qd2*t65*7.53132431084391E-4+q3*qd1*t21*7.917553149477345E-2+q3*qd1*t40*2.256673759925249E-1-q3*qd2*t52*5.06728414408415E-1-qd1*t36*t40*1.773863225711729E-2-1.374393583700811E-2;
    C(0,2) = qd1*(-1.128336879962624E-1)-t52*1.266821036021037E-1+t53*4.454206864616806E-2-t57*2.905664682775014E-1-t58*2.698969455342773E-3-t61*4.465001762795682E-2+t64*1.882831077710977E-4+t65*8.929284668366714E-4+t66+t67-t68+t69+t70-t71+t72+q3*qd1*1.773863225711729E-2+qd1*t15*1.928338689250353E-2-qd1*t17*2.382719144631059E-1-qd1*t18*5.397938910685546E-3+qd1*t19*9.641693446251764E-3-qd1*t21*1.128336879962624E-1-qd1*t22*8.930003525591364E-2+qd1*t23*1.191359572315529E-1-qd1*t24*1.191359572315529E-1+qd1*t25*3.765662155421955E-4-qd1*t26*3.765662155421955E-4+qd1*t27*1.785856933673343E-3-qd1*t28*1.785856933673343E-3+qd1*t29*3.765662155421955E-4-qd1*t30*3.765662155421955E-4+qd1*t32*1.785856933673343E-3-qd1*t33*1.785856933673343E-3+qd1*t34*1.023891308639383E-3-qd1*t35*2.158979635775254E-4+qd1*t37*4.374047602046162E-3-qd1*t39*8.908413729233612E-2+qd1*t40*3.958776574738673E-2-qd3*t49*3.571713867346686E-3+qd3*t50*7.53132431084391E-4-qd3*t51*1.781682745846722E-1-qd2*t54*5.06728414408415E-1-qd3*t53*8.748095204092325E-3+qd2*t56*5.811329365550027E-1+qd2*t59*2.382719144631059E-1-qd3*t58*1.786000705118273E-1+qd3*t61*1.079587782137109E-2-qd3*t64*3.571713867346686E-3+qd3*t65*7.53132431084391E-4+q3*qd1*t21*1.773863225711729E-2;
    C(1,0) = -t74-t76-t77+qd1*t14*1.51374376407166E-2+t15*t56*9.641693446251764E-3-t17*t56*1.191359572315529E-1-t34*t56*5.119456543196916E-4-t34*t57*8.919208627412488E-2+t35*t56*1.079489817887627E-4-t35*t57*4.885993256365854E-3+t56*t73*4.915806880307994E-2+t57*t73*1.320771962680341E-1-t56*t75*1.320771962680341E-1+t57*t75*4.915806880307994E-2+q3*t57*t73*1.266821036021037E-1-q3*t56*t75*1.266821036021037E-1+qd1*t15*t16*2.382719144631059E-1+qd1*t16*t17*1.928338689250353E-2-qd1*t14*t34*1.954397302546342E-2+qd1*t14*t35*3.567683450964995E-1-qd1*t16*t34*4.317959271550508E-4-qd1*t16*t35*2.047782617278766E-3+qd3*t15*t56*4.765438289262118E-1+qd3*t17*t56*3.856677378500706E-2+qd1*t14*t73*7.450957814263388E-3-qd1*t14*t75*5.280501502575559E-2+qd1*t16*t73*5.280501502575559E-2+qd1*t16*t75*7.450957814263388E-3-qd1*t14*t78*8.059462759140663E-1-qd3*t34*t56*4.317959271550508E-4+qd1*t14*t79*3.519907784220678E-1+qd3*t34*t57*1.954397302546342E-2-qd3*t35*t56*2.047782617278766E-3+qd1*t16*t78*3.519907784220678E-1-qd3*t35*t57*3.567683450964995E-1+qd1*t16*t79*8.059462759140663E-1+qd1*t56*t78*2.825070207040501E-1-qd1*t57*t79*2.825070207040501E-1-t34*t57*t73*1.785856933673343E-3+t34*t56*t75*1.785856933673343E-3+t35*t57*t73*3.765662155421955E-4-t35*t56*t75*3.765662155421955E-4+q3*qd1*t14*t78*2.256673759925249E-1-q3*qd1*t14*t79*7.917553149477345E-2-q3*qd1*t16*t78*7.917553149477345E-2-q3*qd1*t16*t79*2.256673759925249E-1+qd1*t14*t34*t73*1.506264862168782E-3+qd1*t14*t35*t73*7.143427734693371E-3+qd1*t16*t34*t75*1.506264862168782E-3+qd1*t16*t35*t75*7.143427734693371E-3-qd1*t14*t36*t78*1.773863225711729E-2+qd1*t16*t36*t79*1.773863225711729E-2-qd3*t34*t57*t73*1.506264862168782E-3+qd3*t34*t56*t75*1.506264862168782E-3-qd3*t35*t57*t73*7.143427734693371E-3+qd3*t35*t56*t75*7.143427734693371E-3-1.374393583700811E-2;
    C(1,1) = q3*1.128336879962624E-1-qd3*2.256673759925249E-1+t15*1.191359572315529E-1+t17*9.641693446251764E-3-t34*2.158979635775254E-4-t35*1.023891308639383E-3-t36*8.869316128558643E-3-t73*2.640250751287779E-2+t75*3.725478907131694E-3+q3*qd3*3.547726451423457E-2-qd3*t15*3.856677378500706E-2+qd3*t17*4.765438289262118E-1+qd3*t34*2.047782617278766E-3-qd3*t35*4.317959271550508E-4+t34*t75*7.53132431084391E-4+t35*t75*3.571713867346686E-3-qd3*t34*t75*7.143427734693371E-3+qd3*t35*t75*1.506264862168782E-3-4.711246955561407E-1;
    C(1,2) = qd2*(-2.256673759925249E-1)-t34*8.919208627412488E-2-t35*4.885993256365854E-3+t83+t84+t85+t86+t87+t88+t89+t90-qd2*t15*3.856677378500706E-2-qd2*t35*4.317959271550508E-4+qd3*t34*1.954397302546342E-2-qd3*t35*3.567683450964995E-1-qd1*t56*5.811329365550027E-1-t34*t73*1.785856933673343E-3+qd1*t15*t56*4.765438289262118E-1+qd1*t17*t56*3.856677378500706E-2-qd1*t34*t56*4.317959271550508E-4-qd1*t35*t56*2.047782617278766E-3-qd1*t35*t57*3.567683450964995E-1-qd3*t34*t73*1.506264862168782E-3-qd2*t34*t75*7.143427734693371E-3-qd3*t35*t73*7.143427734693371E-3-qd1*t34*t57*t73*1.506264862168782E-3-qd1*t35*t57*t73*7.143427734693371E-3-1.979388287369336E-2;
    C(2,0) = qd1*2.256673759925249E-1-t57*2.905664682775014E-1-q3*qd1*3.547726451423457E-2+qd1*t16*3.958776574738673E-2-qd1*t34*2.047782617278766E-3+qd1*t35*4.317959271550508E-4+qd2*t56*1.057676765481214-qd1*t78*3.958776574738673E-2-qd1*t80*1.871006022075178E-1-qd1*t81*2.256673759925249E-1-t34*t56*4.885993256365854E-3-t34*t57*1.079489817887627E-4+t35*t56*8.919208627412488E-2-t35*t57*5.119456543196916E-4-t56*t73*1.266821036021037E-1-t57*t75*1.266821036021037E-1+q3*qd1*t80*3.547726451423457E-2+q3*qd1*t81*3.547726451423457E-2+qd2*t34*t56*4.317959271550508E-4-qd2*t34*t57*1.954397302546342E-2+qd2*t35*t56*2.047782617278766E-3+qd2*t35*t57*3.567683450964995E-1+qd1*t34*t75*7.143427734693371E-3-qd1*t35*t75*1.506264862168782E-3+qd1*t34*t80*2.047782617278766E-3-qd1*t35*t80*4.317959271550508E-4-qd2*t56*t82*9.530876578524235E-1+qd1*t80*t81*4.513347519850498E-1-qd1*t80*t82*7.713354757001412E-2+t34*t56*t73*3.765662155421955E-4+t35*t56*t73*1.785856933673343E-3+t34*t57*t75*3.765662155421955E-4+t35*t57*t75*1.785856933673343E-3-q3*qd1*t80*t81*7.095452902846915E-2-qd2*t34*t35*t56*7.713354757001412E-2+qd1*t34*t56*t57*3.567683450964995E-1+qd1*t35*t56*t57*1.954397302546342E-2+qd1*t34*t35*t80*9.530876578524235E-1+qd2*t34*t57*t73*1.506264862168782E-3-qd2*t34*t56*t75*1.506264862168782E-3+qd2*t35*t57*t73*7.143427734693371E-3-qd2*t35*t56*t75*7.143427734693371E-3-qd1*t34*t75*t80*7.143427734693371E-3+qd1*t35*t75*t80*1.506264862168782E-3-qd1*t56*t57*t81*1.583510629895469E-1+qd1*t73*t75*t80*1.583510629895469E-1+qd1*t34*t56*t57*t73*7.143427734693371E-3-qd1*t35*t56*t57*t73*1.506264862168782E-3+qd1*t56*t57*t73*t75*4.513347519850498E-1-q3*qd1*t56*t57*t73*t75*7.095452902846915E-2;
    C(2,1) = qd2*1.871006022075178E-1-t34*8.919208627412488E-2-t35*4.885993256365854E-3-t83+t84-t85-t86-t87-t88-t89-t90+qd2*t35*4.317959271550508E-4+qd1*t56*1.057676765481214+qd2*t82*7.713354757001412E-2-t34*t73*1.785856933673343E-3+qd1*t34*t56*4.317959271550508E-4+qd1*t35*t56*2.047782617278766E-3+qd1*t35*t57*3.567683450964995E-1+qd2*t34*t75*7.143427734693371E-3-qd1*t56*t82*9.530876578524235E-1-qd1*t34*t35*t56*7.713354757001412E-2+qd1*t34*t57*t73*1.506264862168782E-3+qd1*t35*t57*t73*7.143427734693371E-3-1.979388287369336E-2;
    C(2,2) = 1.342936099164326;

}
void PsmForceControl::CalcG(Eigen::VectorXd q)
{
    float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);

    float t2 = cos(q1);
    float t3 = sin(q1);
    float t4 = cos(q2);
    float t5 = cos(2.908373974667121E-1);
    float t6 = sin(q2);
    float t7 = sin(q3);
    float t8 = sin(2.908373974667121E-1);
    float t9 = cos(q3);

    G(0) = q1*(-6.789509964297665)+t2*1.430783703993206E-1-t3*1.028155744757573-t3*t4*8.624819120873413E-1+t3*t5*9.228562676332305+t2*t7*2.460232608209011E-2+t3*t6*1.216989776329687E-1-t2*t9*1.166759863333251E-1+t3*t4*t5*1.038316632917131E-1-t3*t5*t6*1.93980052162195E-1+t3*t4*t8*1.93980052162195E-1+t3*t6*t7*1.166759863333251E-1+t3*t6*t8*1.038316632917131E-1+t3*t6*t9*2.460232608209011E-2-q3*t3*t4*t5*8.69192980598747E-2-q3*t3*t6*t8*8.69192980598747E-2;
    G(1) = q2*8.435824140033144E-1-t2*t4*1.216989776329687E-1-t2*t6*8.624819120873413E-1+t2*t4*t5*1.93980052162195E-1-t2*t4*t7*1.166759863333251E-1+t2*t5*t6*1.038316632917131E-1-t2*t4*t8*1.038316632917131E-1-t2*t4*t9*2.460232608209011E-2+t2*t6*t8*1.93980052162195E-1-q3*t2*t5*t6*8.69192980598747E-2+q3*t2*t4*t8*8.69192980598747E-2;
    G(2) = t3*t7*1.166759863333251E-1+t3*t9*2.460232608209011E-2+t2*t4*t5*8.69192980598747E-2+t2*t6*t7*2.460232608209011E-2+t2*t6*t8*8.69192980598747E-2-t2*t6*t9*1.166759863333251E-1;

}

void PsmForceControl::CalcDiffJacobian(Eigen::VectorXd q, Eigen::VectorXd qd)
{
    float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);
    float qd1 = qd(0);
    float qd2 = qd(1);
    float qd3 = qd(2);

    float t2 = 3.141592653589793*(1.0/2.0);
    float t3 = -q2+t2+2.908373974667121E-1;
    float t4 = q2-2.908373974667121E-1;
    float t5 = cos(t4);
    float t6 = cos(t3);
    float t7 = sin(t4);
    float t8 = sin(t3);
    float t9 = q2-t2;
    float t10 = t5*t6;
    float t17 = t7*t8;
    float  t11 = t10-t17;
    float  t12 = sin(t9);
    float  t13 = t5*t8;
    float  t14 = t6*t7;
    float  t15 = t13+t14;
    float  t16 = cos(t9);
    float  t18 = q1-t2;
    float  t19 = sin(t18);
    float  t20 = q3+4.162E-1;
    float  t21 = cos(t18);
    float  t22 = t5*t8*t19;
    float t23 = t6*t7*t19;
    float  t24 = t22+t23;
    float  t25 = t5*t6*t19;
    float  t33 = t7*t8*t19;
    float  t26 = t25-t33;
    float  t27 = qd1*t5*t8*t21;
    float t28 = qd1*t6*t7*t21;
    float  t29 = t27+t28;
    float  t30 = qd1*t5*t6*t21;
    float  t32 = qd1*t7*t8*t21;
    float  t31 = t30-t32;
    float  t34 = qd1*t5*t8*t19;
    float  t35 = qd1*t6*t7*t19;
    float  t36 = t34+t35;
    float  t37 = qd1*t5*t6*t19;
    float  t39 = qd1*t7*t8*t19;
    float  t38 = t37-t39;
    float  t40 = t5*t6*t21;
    float  t45 = t7*t8*t21;
    float  t41 = t40-t45;
    float  t42 = t5*t8*t21;
    float  t43 = t6*t7*t21;
    float  t44 = t42+t43;
    float  t46 = t16*t38;
    float  t47 = qd2*t16*t44;
    float  t48 = qd2*t12*t41;
    float  t49 = t46+t47+t48-t12*t36;
    float  t50 = t12*t29;
    float  t51 = qd2*t16*t24;
    float  t52 = qd2*t12*t26;

    Jd(0,1) = t20*(qd2*t15*cos(q2-3.141592653589793*(1.0/2.0))+qd2*t11*t12)-qd2*t7*(3.0/2.0E1)-qd3*(t11*t16-t12*t15)-qd2*t11*t12*(1.68E2/6.25E2)-qd2*t11*t16*(4.3E1/1.0E3)+qd2*t12*t15*(4.3E1/1.0E3)-qd2*t15*t16*(1.68E2/6.25E2);
    Jd(0,2) = -qd2*t11*t16+qd2*t12*t15;
    Jd(1,0) = t12*t29*(1.68E2/6.25E2)+t12*t31*(4.3E1/1.0E3)+t16*t29*(4.3E1/1.0E3)-t16*t31*(1.68E2/6.25E2)-qd3*(t12*t24-t16*t26)-t20*(t50+t51+t52-t16*t31)-qd1*t5*t21*(3.0/2.0E1)+qd2*t7*t19*(3.0/2.0E1)-qd2*t12*t24*(4.3E1/1.0E3)+qd2*t12*t26*(1.68E2/6.25E2)+qd2*t16*t24*(1.68E2/6.25E2)+qd2*t16*t26*(4.3E1/1.0E3)-qd1*t5*t6*t21*(1.29E2/2.5E2)+qd1*t7*t8*t21*(1.29E2/2.5E2);
    Jd(1,1) = -t20*(t12*t38+t16*t36+qd2*t12*t44-qd2*t16*t41)-t12*t36*(4.3E1/1.0E3)+t12*t38*(1.68E2/6.25E2)+t16*t36*(1.68E2/6.25E2)+t16*t38*(4.3E1/1.0E3)+qd3*(t12*t41+t16*t44)+qd1*t7*t19*(3.0/2.0E1)-qd2*t5*t21*(3.0/2.0E1)+qd2*t12*t41*(4.3E1/1.0E3)+qd2*t12*t44*(1.68E2/6.25E2)-qd2*t16*t41*(1.68E2/6.25E2)+qd2*t16*t44*(4.3E1/1.0E3);
    Jd(1,2) = t49;
    Jd(2,0) = t12*t36*(-1.68E2/6.25E2)-t12*t38*(4.3E1/1.0E3)-t16*t36*(4.3E1/1.0E3)+t16*t38*(1.68E2/6.25E2)-t20*t49-qd3*(t12*t44-t16*t41)+qd1*t5*t19*(3.0/2.0E1)+qd2*t7*t21*(3.0/2.0E1)+qd2*t12*t41*(1.68E2/6.25E2)-qd2*t12*t44*(4.3E1/1.0E3)+qd2*t16*t41*(4.3E1/1.0E3)+qd2*t16*t44*(1.68E2/6.25E2)+qd1*t5*t6*t19*(1.29E2/2.5E2)-qd1*t7*t8*t19*(1.29E2/2.5E2);
    Jd(2,1) = -t20*(t12*t31+t16*t29-qd2*t12*t24+qd2*t16*t26)-t12*t29*(4.3E1/1.0E3)+t12*t31*(1.68E2/6.25E2)+t16*t29*(1.68E2/6.25E2)+t16*t31*(4.3E1/1.0E3)-qd3*(t12*t26+t16*t24)+qd2*t5*t19*(3.0/2.0E1)+qd1*t7*t21*(3.0/2.0E1)-qd2*t12*t24*(1.68E2/6.25E2)-qd2*t12*t26*(4.3E1/1.0E3)-qd2*t16*t24*(4.3E1/1.0E3)+qd2*t16*t26*(1.68E2/6.25E2);
    Jd(2,2) = -t50-t51-t52+t16*t31;

    // ROS_INFO_STREAM("Jd: "<<Jd);

}
void PsmForceControl::CalcM(Eigen::VectorXd q) //Eigen::VectorXd qd)
{   float q1 = q(0);
    float q2 = q(1);
    float q3 = q(2);

    if (name == "PSM1")
    {
        float t2 = q2 * 2.0;
        float t3 = t2 - 2.908373974667121E-1;
        float t4 = cos(t2);
        float t5 = sin(t2);
        float t6 = t2 - 5.816747949334241E-1;
        float t7 = cos(t6);
        float t8 = q3 * q3;
        float t9 = cos(2.908373974667121E-1);
        float t10 = cos(t3);
        float t11 = cos(q2);
        float t12 = q2 - 2.908373974667121E-1;
        float t13 = sin(t12);
        float t14 = sin(q2);
        float t15 = t13 * 2.825479943851302E-2;
        float t16 = q3 * t14 * 1.083575939157694E-1;
        float t17 = t11 * (-2.633253703162953E-2) - t14 * 3.121782280713317E-2 + t15 + t16 -
                    q3 * t13 * 9.977867094932855E-2 + 3.139133942215261E-2;
        float t18 = sin(2.908373974667121E-1);
        float t19 = cos(t12);
        float t20 = t19 * 9.977867094932855E-2;
        float t21 = t11 * (-1.083575939157694E-1) + t20;
        float t22 = t18 * (-4.470066558368267E-2) + 2.260311426499341E-1;

        M(0, 0) = q3 * (-1.323508787733179E-1) + t4 * 1.434998739014914E-1 - t5 * 2.073904819513868E-2 +
                  t7 * 3.3525499187762E-3 + t8 * 2.845068969089497E-1 - t9 * 3.605892464365831E-2 -
                  t10 * 3.605892464365831E-2 - t11 * 4.228633992530593E-2 + t18 * 6.885803343676378E-2 -
                  cos(q2 - 5.816747949334241E-1) * 4.228633992530593E-2 + sin(t3) * 6.885803343676378E-2 +
                  q3 * t4 * 2.403928309577221E-1 + q3 * t5 * 1.206793068239835E-1 - q3 * t7 * 3.7274370973104E-1 -
                  q3 * t9 * 4.470066558368267E-2 - q3 * t10 * 4.470066558368267E-2 + t4 * t8 * 1.490022186122756E-1 +
                  t7 * t8 * 1.355046782966741E-1 + q3 * sin(t6) * 1.053518358259506E-1 + 3.809583595416477E-1;
        M(0, 1) = t17;
        M(0, 2) = t21;
        M(1, 0) = t17;
        M(1, 1) = q3 * (-2.647017575466359E-1) + t8 * 5.690137938178994E-1 - t9 * 7.211784928731662E-2 +
                  t18 * 1.377160668735276E-1 - q3 * t9 * 8.940133116736533E-2 + 4.852687409793962E-1;
        M(1, 2) = t22;
        M(2, 0) = t21;
        M(2, 1) = t22;
        M(2, 2) = 5.690137938178994E-1;
    }

}

void PsmForceControl::CalcFr(Eigen::VectorXd qd)
{
    for (int i=0;i<3;i++)
    {
        if (abs(qd(i)) < deadband)
        {
            qd(i)=0;
        }
    }

    float qd1 = qd(0);
    float qd2 = qd(1);
    float qd3 = qd(2);

    Fr(0) = (-1.311940751876277E-1)/(exp(qd1*-6.00E2)+1.0)+6.559703759381383E-2;
    Fr(1) = (-2.636855528068643E-1)/(exp(qd2*-6.0E2)+1.0)+1.318427764034322E-1;
    Fr(2) = (-1.181909487060188)/(exp(qd3*-6.0E2)+1.0)+5.909547435300938E-1;
}

void PsmForceControl::SetGainsInit()
{
    //Mt.diagonal()<<0.3, 0.4, 0.5;

    Mt.diagonal()<<0.3, 0.4, 0.1;

 // Real Coefficients
    Kp.diagonal() << 60, 60, 100;
    Kd.diagonal() << 2, 2, 2;

 // Test Damping
    //Kp.diagonal()<<1, 1, 3;
    //Kd.diagonal()<<5, 0.5, 10;
}

void PsmForceControl::SetDesiredInit()
{
 x0 = xe;
 q0 = q;

 double incre [3] = {0, 0, 0};
 fd << 0, 0, 0;
 xd<< incre[0]+x0(0),incre[1]+x0(1) ,incre[2]+x0(2) ;

 vd << 0, 0, 0;
 ad << 0, 0, 0;
}


void PsmForceControl::CallbackJacobian(std_msgs::Float64MultiArray msg)
{
for (int i=0;i<3;i++)
   {
     for (int j=0;j<3;j++)
 {
  Ja(i,j)=msg.data[i*6+j];
     }
   }
}


void PsmForceControl::CallbackJoint(sensor_msgs::JointState msg)
{
    for (int i=0;i<3;i++)
    {
    q(i)=msg.position[i];
    qd(i)=msg.velocity[i];
    eff(i)=msg.effort[i];

    myq[i].push_back(msg.velocity[i]);

    if (index > filter_n-1)
    {
        myq[i].pop_front();
        sum[i] = 0;
        for(int j = 0;j<filter_n;j++)
        {
            sum[i] = sum[i]+myq[i][j];
        }
        qd(i) = sum[i]/filter_n;
    }
    }
  //ROS_INFO_STREAM("joint_states"<<q);
    index = index + 1;
}

void PsmForceControl::CallbackCartesian(geometry_msgs::PoseStamped msg)
{
    xe(0) = msg.pose.position.y;  // y becomes x in my calculation
    xe(1) =-msg.pose.position.x; // x becomes -y in my calculation
    xe(2) = msg.pose.position.z;
    //ROS_INFO_STREAM("cartesian"<<xe);
}

 void PsmForceControl::CallbackForce(geometry_msgs::Wrench msg)
 {
     he(0) = msg.force.x;
     he(1) = msg.force.y;
     he(2) = msg.force.z;
 }

 void PsmForceControl::CallbackSetForce(geometry_msgs::Pose msg)
 {
    fd(0)=msg.position.x;
    fd(1)=msg.position.y;
    fd(2)=msg.position.z;
 }

 void PsmForceControl::CallbackSetPosition(geometry_msgs::Twist msg)
 {
    xd(0)=msg.linear.x;
    xd(1)=msg.linear.y;
    xd(2)=msg.linear.z;
 }

 void PsmForceControl::CallbackSetPositionIncrement(geometry_msgs::Twist msg)
 {   //The real thangg
     //xd(0)=msg.position.x+xe(0);
     //xd(1)=msg.position.y+xe(1);
     //xd(2)=msg.position.z+xe(2);
     q1_traj.check2 = false;
     q2_traj.check2 = false;
     q3_traj.check2 = false;

     //Just for testing
     xd(0)= msg.linear.x + xd(0);
     xd(1)= msg.linear.y + xd(1);
     xd(2)= msg.linear.z + xd(2);

     q1_traj.qd << xe(0), 0, 0, xd(0),0,0;
     q2_traj.qd << xe(1), 0, 0, xd(1),0,0;
     q3_traj.qd << xe(2), 0, 0, xd(2),0,0;

     double tol = 0.000001;
     if (abs(msg.linear.x) <  tol) {
         q1_traj.check2 = true;
     }
     if (abs(msg.linear.y) < tol){
         q2_traj.check2 = true;
     }
     if (abs(msg.linear.z) < tol){
         q3_traj.check2 = true;
     }

     q1_traj = interpolate(q1_traj);
     q2_traj = interpolate(q2_traj);
     q3_traj = interpolate(q3_traj);

     //ROS_INFO("IT WORKS");

     t0 = ros::Time::now().toSec();
     t = 0;
 }


void PsmForceControl::CalcU()
 {    // This is parallel/position/force

    int fl = 4; //force limit
    ve = JaM*qd;


    if (q1_traj.check==true)
    {

        x_int << q1_traj.x(t), q2_traj.x(t), q3_traj.x(t);
        v_int << q1_traj.v(t), q2_traj.v(t), q3_traj.v(t);
        a_int << q1_traj.a(t), q2_traj.a(t), q3_traj.a(t);

        y = JaM.inverse()*Mt.inverse()*(Mt*a_int+Kd*(v_int-ve)+Kp*(x_int-xe)-Mt*Jd*qd-he);
        //y = JaM.inverse() * Mt.inverse() * (Mt * a_int + Kd * (v_int - ve) + Kp * (x_int - xe) - he);

        //ROS_INFO_STREAM("interpolating");

        mq0.data = x_int(0);
        plot_x.publish(mq0);

        mq1.data =v_int(2);
        plot_y.publish(mq1);

        //mq2.data = x_int(2);
        //plot_z.publish(mq2);

        t = t + 1;

   /*     ROS_INFO_STREAM("u_int 1 at time" << t << " : " << u(0));
        ROS_INFO_STREAM("u_int 2 at time" << t << " : " << u(1));
        ROS_INFO_STREAM("u_int 3 at time" << t << " : " << u(2));*/
        if (t == rate*tf)
        {
            t = 0;
            q1_traj.check = false;
            q2_traj.check = false;
            q3_traj.check = false;
        }
        fl = fl*3;

    }
    else {
        y = JaM.inverse()*Mt.inverse()*(Mt*ad+Kd*(vd-ve)+Kp*(xd-xe)-Mt*Jd*qd-he);


    }

    u = M*y + N  + JaM.transpose()*he;

     ROS_INFO_STREAM("u_steady 1: "<< u(0));
     ROS_INFO_STREAM("u_steady 2: "<< u(1));
     ROS_INFO_STREAM("u_steady 3: "<< u(2));

// ///// SAFETY ///////
    if (std::abs(u(0))>fl|std::abs(u(1))>fl|std::abs(u(2))>fl*2.5)
    {
        u<< 0, 0, 0;
    }

    // ROS_INFO_STREAM("x increment: "<< xd - xe);
    //ROS_INFO_STREAM("  xd: "<< xd << endl <<" xe[]: " << xe << endl);
    // ROS_INFO_STREAM("u: "<< u);
    // ROS_INFO_STREAM("Check Direction: "<< Ja.inverse()*(xd-xe)*1000);
    // ROS_INFO_STREAM("M: "<< M);
    // ROS_INFO_STREAM("Ja: "<< Ja);
    // ROS_INFO_STREAM("JaM: "<< JaM);

    // ROS_INFO_STREAM("Ja inverse: "<< JaM.transpose()*he);//ROS_INFO_STREAM("Ja inverse: "<< Ja.inverse());
    // ROS_INFO_STREAM("qd: "<< qd);
 }

void PsmForceControl::output()
 {
  joint_msg.effort[0]=u(0);
  joint_msg.effort[1]=u(1);
  joint_msg.effort[2]=u(2);


  // ----------------------- IMPORTANT--------------------
 joint_pub.publish(joint_msg);

  // ------------------------------------------------------
  /* msg2.velocity[0] = qd(0);
   msg2.velocity[1] = qd(1);
   msg2.velocity[2] = qd(2);

   plot_x.publish(msg2);*/

   mq0.data = qd(0);
   plot_x.publish(mq0);

   mq1.data = qd(1);
   plot_y.publish(mq1);

   mq2.data = qd(2);
   plot_z.publish(mq2);

 }

int main(int argc, char **argv)
{
  // Options
    string name = "PSM1";

  ros::init(argc, argv, "PsmForceControl_node");
  ros::NodeHandle n;
  ROS_INFO("It started");

  PsmForceControl obj(n,name);
  ros::Rate r(obj.rate);

  // int i, j;
  int count = 0;
  ros::spinOnce();
  ros::Duration(1).sleep();
  ros::spinOnce();

  obj.SetGainsInit();
  obj.SetDesiredInit();

  while(ros::ok())
  {
  obj.CalcJaM(obj.q,obj.qd);
  obj.CalcDiffJacobian(obj.q,obj.qd);
  obj.CalcFr(obj.qd);
  obj.CalcN(obj.q,obj.qd);
  obj.CalcM(obj.q);
  obj.CalcU();
  obj.output();

  r.sleep();
  ros::spinOnce();
  }
ros::spin();

}
